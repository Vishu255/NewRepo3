# This workflow will build a .NET project.....
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
    #- name: Upload artifact for deployment job
    #  uses: actions/upload-artifact@v2
    #  with:
    #      name: Download application artifacts from WKTAEE repo 
    #      feedsToUse: 'external'
    #      externalFeedCredentials: 'wktaae-workspace-artifacts'
    #      feedDownloadExternal: 'European Shared Assets/WKTAAE-Build-Artifacts'
    #      packageDownloadExternal: '$(packageName)'
    #      versionDownloadExternal: '$(packageVersion)'
    #      path: '$(System.DefaultWorkingDirectory)'
    #      retention-days: 1
          
    #- name: Download artifact from build job
    #  uses: actions/download-artifact@v2
    #  with:
    #      name: Download application artifacts from WKTAEE repo
#=========================================================================
    #- uses: actions/download-artifact@v2
    #  name: Download application artifacts from WKTAEE repo 
    #  run: |
    #    command: download
    #    downloaddirectory: '${{ github.workspace }}'
    #    feedsToUse: 'external'
    #    externalFeedCredentials: 'wktaae-workspace-artifacts'
    #    feedDownloadExternal: 'European Shared Assets/WKTAAE-Build-Artifacts'
    #    packageDownloadExternal: '$(packageName)'
    #    versionDownloadExternal: '$(packageVersion)'
      # checkout
    - uses: actions/checkout@v1
      # download artifact from azure dev ops
    - name: download artifacts from azure dev ops build pipeline
      uses: manishsat/ado-download-artifact@v1
      with:
          #buildDefinitionId: ${{ secrets.buildDefinitionId }}
          pattoken: ${{ secrets.pattoken }}
          artifactName: ${{ secrets.artifactName }}
          orgName: ${{ secrets.orgName }}
          feedDownloadExternal: ${{ secret.feeddownload }}
          externalFeedCredentials: ${{ secret.externalfeed }}
          downloaddirectory: '${{ github.workspace }}'
          #projectId:  ${{ secrets.projectId }}
      
